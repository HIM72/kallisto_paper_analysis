HUMAN_PRE = "NA12716_7"

# annotations
ANNO = "../annotation"
ANNO_PREFIX = "Homo_sapiens.GRCh37.75.cdna.pc"
ANNO_FA = "{0}/{1}.fa".format( ANNO, ANNO_PREFIX )
ANNO_GTF = "{0}/Homo_sapiens.GRCh37.75.sub.gtf".format( ANNO )

# genomes
GENOME_FA = "../GRCh37_75/Homo_sapiens.GRCh37.75.dna.primary_assembly.fa"
GENOME_BWT_IDX = "../GRCh37_75/Homo_sapiens.GRCh37.75.dna.primary_assembly"

# tool-specific indices
IDX = "../index"
BWT_IDX = "../index/{0}".format( ANNO_PREFIX )
RSEM_REF = "{0}/{1}_rsem/ref".format( IDX, ANNO_PREFIX )
KAL_IDX = "{0}/{1}.kidx".format( IDX, ANNO_PREFIX )
SALMON_IDX = "{0}/{1}_salmon_idx".format( IDX, ANNO_PREFIX )

N_THREADS = 20

# total number of simulations
SIMS_LIST = [i for i in range(1, 21)]

rule all:
    input:
#        # generate the salmon index
#        SALMON_IDX,
#        # quantify HUMAN_PRE with RSEM
#        "{0}/rsem/out.isoforms.results".format( HUMAN_PRE ),
#        # generate simulations using RSEM
#        expand(HUMAN_PRE + "/rsem/sim/30000000/{sims}_1.fq.gz", sims = SIMS_LIST),
#        # quantify using kallisto
#        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/kallisto/expression.h5", id = SIMS_LIST ),
#        # quantify using salmon
#        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/salmon/quant.sf", id = SIMS_LIST ),
#        # quantify using eXpress
#        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/express/results.xprs", id = SIMS_LIST )
        # TopHat on simulations
        #expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/alignments/tophat/accepted_hits.bam", id = SIMS_LIST )
        # Cufflinks on simulations
        #expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/cufflinks/isoforms.fpkm_tracking", id = SIMS_LIST )
        #expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/alignments/bwt2_rsem.bam", id = [6] )
        expand(HUMAN_PRE + "/rsem/sim/30000000/{id}/rsem/out.isoforms.results", id = [6] )

########################################################################
# INDICES
########################################################################

# TODO: show bowtie2 index generation

# Prepare the main annotation to run RSEM on it
rule rsem_prepare:
    input:
        ANNO_FA
    output:
        "{0}.grp".format( RSEM_REF )
    run:
        out_dir = '{0}/{1}_rsem'.format( IDX, ANNO_PREFIX )
        shell('mkdir -p {0}'.format( out_dir ) )
        shell('rsem-prepare-reference {0} {1}'.format( ANNO_FA, RSEM_REF ))

# generate the salmon index
rule salmon_index:
    output:
        SALMON_IDX
    threads: N_THREADS
    shell:
        'salmon index '
        '-t ' + ANNO_FA + ' '
        '-i {output} '

########################################################################
# REAL DATA TO ACT AS SEED FOR SIMULATIONS
########################################################################

# align for RSEM on "real" data
rule rsem_align:
    input:
        "{sample}/{sample}_1.fastq.gz", 
        "{sample}/{sample}_2.fastq.gz"
    output:
        "{sample}/alignments/{sample}_rsem.bam"
    benchmark:
        "benchmarks/rsem_align/{sample}.json"
    threads:
        N_THREADS
    message:
        'Running bowtie2 (thr = {threads}) on {input}'
    shell:
        'bowtie2 '
        '--sensitive --dpad 0 --gbar 99999999 --mp 1,1 --np 1 --score-min L,0,-0.1 '
        '--no-mixed --no-discordant '
        '--seed 42 '
        '-k 200 '
        '-x ' + BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} | '
        'samtools view -Sb - > {output}'

# Run RSEM on a "real" sample
rule rsem:
    input:
        "{sample}/alignments/{sample}_rsem.bam"
    output:
        "{sample}/rsem/out.isoforms.results"
    benchmark:
        "benchmarks/rsem/{sample}.json"
    threads:
        N_THREADS
    message:
        "Executing RSEM with {input}"
    run:
        shell("mkdir -p {wildcards.sample}/rsem")
        out_prefix = "{wildcards.sample}/rsem/out"
        cmd = " ".join(["rsem-calculate-expression", "--bam", "--paired-end",
            "--no-bam-output", "-p {threads}", "{input}", RSEM_REF, out_prefix])
        shell(cmd)

########################################################################
# GENERATE SIMULATIONS
########################################################################

# Simulate from RSEM using errors
rule rsem_simulate:
    input:
        "{sample}/rsem/out.isoforms.results"
    output:
        "{sample}/rsem/sim/{n_reads,\d+}/{sim_num,\d+}_1.fq.gz",
        "{sample}/rsem/sim/{n_reads,\d+}/{sim_num,\d+}_2.fq.gz"
    threads: 1
    run:
        shell("mkdir -p {wildcards.sample}/rsem/sim/{wildcards.n_reads}")
        res = "{wildcards.sample}/rsem/sim/{wildcards.n_reads}/{wildcards.sim_num}"
        cmd = " ".join([
            "rsem-simulate-reads",
            RSEM_REF,
            "{wildcards.sample}/rsem/out.stat/out.model",
            "{wildcards.sample}/rsem/out.isoforms.results",
            "0.0",
            "{wildcards.n_reads}",
            "{wildcards.sample}/rsem/sim/{wildcards.n_reads}/{wildcards.sim_num}",
            "--seed", "{wildcards.sim_num}"
            ])
        shell(cmd)
        shell("gzip {0}*.fq".format( res ))

########################################################################
# ALIGNMENTS
########################################################################

# run bowtie2 on RSEM simulated data for eXpress
rule bwt2_express_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2.bam"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/bwt2.json"
    threads: N_THREADS
    shell:
        'bowtie2 '
        '--no-mixed --no-discordant --rdg 6,5 --rfg 6,5 --score-min L,-.6,-.4 '
        '-k 200 '
        '-x ' + BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} |'
        'samtools view -Sb - > {output}'

# bwt2 alignments for RSEM
rule bwt2_rsem_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2_rsem.bam"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/bwt2_rsem.json"
    threads: N_THREADS
    message:
        'Running bowtie2 (thr = {threads}) on {input}'
    shell:
        'bowtie2 '
        '--sensitive --dpad 0 --gbar 99999999 --mp 1,1 --np 1 --score-min L,0,-0.1 '
        '--no-mixed --no-discordant '
        '--seed 42 '
        '-k 200 '
        '-x ' + BWT_IDX + ' '
        '-p {threads} '
        '-1 {input[0]} '
        '-2 {input[1]} | '
        'samtools view -Sb - > {output}'

rule tophat_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz",
        ANNO_GTF
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/tophat/accepted_hits.bam" 
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/tophat.json"
    threads: N_THREADS
    message:
        'Running TopHat2 (thr = {threads}) on {input}'
    shell:
        'tophat2 '
        '-G {ANNO_GTF} '
        '--transcriptome-index ' + IDX + '/tophat_{ANNO_GTF} '
        '--transcriptome-only '
        '-p {threads} '
        '-o {wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/alignments/tophat '
        + GENOME_BWT_IDX + ' '
        '{input[0]} {input[1]}'

########################################################################
# QUANTIFY SIMULATIONS
########################################################################

# TODO: sailfish quant

# TODO: cufflinks quant
rule cufflinks_rsem_sim:
    input:
        ANNO_GTF,
        rules.tophat_rsem_sim.output
    output:
        '{sample}/rsem/sim/{nreads}/{sim_id}/cufflinks/isoforms.fpkm_tracking'
    benchmark:
        'benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/cufflinks.json'
    threads: N_THREADS
    shell:
        'cufflinks '
        '-o {wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/cufflinks '
        '-p {threads} '
        '-u '
        '--quiet '
        '--GTF {ANNO_GTF} '
        '{input[1]}'

# TODO: RSEM quant
rule rsem_rsem_sim:
    input:
        rules.bwt2_rsem_rsem_sim.output
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/rsem/out.isoforms.results"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/rsem.json"
    threads: N_THREADS
    message:
        "Executing RSEM with {input}"
    run:
        out_path = "{wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/rsem"
        shell("mkdir -p " + out_path)
        out_prefix = out_path + "/out"
        cmd = " ".join(["rsem-calculate-expression", "--bam", "--paired-end",
            "--no-bam-output", "-p {threads}", "{input}", RSEM_REF, out_prefix])
        shell(cmd)

# Run Salmon on RSEM simulations
rule salmon_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/salmon/quant.sf"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/salmon.json"
    threads:
        1
    shell:
        'salmon quant '
        '-i ' + SALMON_IDX + ' '
        '-p {threads} '
        '--libType IU '
        '-o {wildcards.sample}/rsem/sim/{wildcards.nreads}/{wildcards.sim_id}/salmon '
        '-1 <(zcat {input[0]}) -2 <(zcat {input[1]})'

# Run eXpress on RSEM simulations
rule express_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}/alignments/bwt2.bam"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/express/results.xprs"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/express.json"
    threads: 2
    message:
        "eXpress with {input}"
    shell:
        'express --no-bias-correct '
        '-B 10 '
        '-o {wildcards.sample}/rsem/sim/'
        '{wildcards.nreads}/{wildcards.sim_id}/express/ ' +
        ANNO_FA + ' '
        '{input}'

# Run kallisto on RSEM simulations
rule kallisto_rsem_sim:
    input:
        "{sample}/rsem/sim/{nreads}/{sim_id}_1.fq.gz",
        "{sample}/rsem/sim/{nreads}/{sim_id}_2.fq.gz"
    output:
        "{sample}/rsem/sim/{nreads}/{sim_id}/kallisto/expression.h5"
    benchmark:
        "benchmarks/{sample}/rsem/sim/{nreads}/{sim_id}/kallisto.json"
    threads: 1
    message:
        "kallisto quant on {input[0]} {output}"
    shell:
        "kallisto quant -i " + KAL_IDX + " "
        "-o {wildcards.sample}/rsem/sim/{wildcards.nreads}"
        "/{wildcards.sim_id}/kallisto {input[0]} {input[1]}"
